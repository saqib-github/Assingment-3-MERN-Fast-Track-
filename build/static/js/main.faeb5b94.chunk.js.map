{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","todos","setTodos","todo","settodo","type","onChange","e","target","value","onClick","newTodos","addTodos","map","item","index","style","textDecoration","isCompleted","completeTodos","splice","removeTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAgDeA,MA9Cf,WAAe,IAAD,EAEgBC,mBAAS,IAFzB,mBAEHC,EAFG,KAEIC,EAFJ,OAGcF,mBAAS,IAHvB,mBAGHG,EAHG,KAGGC,EAHH,KA4BV,OACI,gCACI,sEACA,uBAAOC,KAAK,OAAOC,SA1BR,SAAAC,GACfH,EAAQG,EAAEC,OAAOC,QAyB4BA,MAAON,IAChD,wBAAQO,QAAS,kBAvBR,WACb,IAAMC,EAAQ,sBAAOV,GAAP,CAAc,CAAEE,UAC9BD,EAASS,GACTP,EAAQ,IAoBmBQ,IAAvB,mBACA,6BACKX,EAAMY,KAAI,SAACC,EAAKC,GAAN,OACP,qBAAKC,MAAO,CAAEC,eAAgBH,EAAKI,YAAc,eAAiB,IAAlE,UACKJ,EAAKX,KACV,wBAAQO,QAAS,YAtBX,SAAAK,GAClB,IAAMJ,EAAQ,YAAOV,GACrBU,EAASI,GAAOG,aAAc,EAC9BhB,EAASS,GAmB2BQ,CAAcJ,IAAtC,wBACA,wBAAQL,QAAS,YAjBd,SAAAK,GACf,IAAMJ,EAAQ,YAAOV,GACrBU,EAASS,OAAOL,EAAO,GACvBb,EAASS,GAc2BU,CAAWN,IAAnC,kCC5BLO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.faeb5b94.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction App(){\n\n    const [todos, setTodos] = useState([ ]);\n    const [todo, settodo] = useState('');\n\n    const inputValue = e => {\n        settodo(e.target.value);\n    }\n\n    const addTodos = () => {\n        const newTodos = [...todos, { todo }];\n        setTodos(newTodos);\n        settodo('');\n      };\n\n    const completeTodos = index => {\n        const newTodos = [...todos];\n        newTodos[index].isCompleted = true;\n        setTodos(newTodos);\n      };\n\n    const removeTodo = index => {\n        const newTodos = [...todos];\n        newTodos.splice(index, 1);\n        setTodos(newTodos);\n      };\n\n\n    return(\n        <div>\n            <h1>Assignment No.3 in React (Todo List)</h1>\n            <input type=\"todo\" onChange={inputValue} value={todo}/>\n            <button onClick={() => addTodos()}> Add </button>\n            <ul>\n                {todos.map((item,index) => (\n                    <li  style={{ textDecoration: item.isCompleted ? \"line-through\" : \"\" }}>\n                        {item.todo} \n                    <button onClick={() => {completeTodos(index)}}> Complete </button> \n                    <button onClick={() => {removeTodo(index)}}> Delete </button> \n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}